#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
/****************************************************************/
//数组指针（指向数组的指针）
//int main() {
//	//int* p = NULL;//整形指针-指向整形的指针-可以存放整形的地址
//	//char* p = NULL;//字符指针-指向字符的指针-可以存放字符的地址
//	//				//数组指针-指向数组的指针-可以存放数组的地址
//	//int arr[10] = { 0 };
//	////arr --首元素地址
//	////&arr[0] --首元素地址
//	////&arr --数组的地址
//	//
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };
//	int(*p)[10] = &arr;
//
//	char* arr1[5];//指针数组
//	char* (*pa)[5]=&arr1;//存放指针数组 地址的数组指针
//
//	return 0;
//}

//int main() {
//	int arr1[10] = { 1,2,3,4,5,6,7,8,9,0 };
//	int(*pa)[10] = &arr1;
//	//使用数组指针遍历数组
//	int i = 0;
//	//for (i = 0; i < 10; i++) {
//	//	printf("%d ",(*pa)[i]);//pa是指向数组的指针，即pa存放的是数组的地址
//	//						//*pa则是这个数组arr1(相当于首元素地址),通过（*pa)[i]访问数组中元素
//	//}
//
//	//for (i = 0; i < 10; i++) {
//	//	printf("%d ",*(*pa+i));
//	//}
//
//	return 0;
//}









//数组指针的应用场景

//参数是数组的形式
void my_print1(int arr[3][5], int x, int y) {
	int i = 0;
	
	for (i = 0; i < x; i++) {
		int j = 0;
		for (j = 0; j < y; j++) {
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}

}
//参数是指针的形式
void my_print2(int(*p)[5], int x, int y) {
	int i = 0;
	for (i = 0; i < x; i++) {
		int j = 0;
		for (j = 0; j < y; j++) {
			printf("%d ", p[i][j]);
			//printf("%d ", *(p[i] + j));
			//printf("%d ", *(*(p + i) + j));//p指向数组第一行 的地址，（p+i）就是第i+1行的地址
											//*（p+i）就是第i+1行，就是该行首元素地址
											//*(p + i) + j就是第i+1行第j+1个元素的地址
											//*(*(p + i) + j)就是第i+1行第j+1个元素

			//printf("%d ", (*(p + i))[j]);
		}
		printf("\n");
	}

}
//int main() {
//	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
//	//my_print1(arr, 3, 5);//传入行数列数
//	//my_print2(arr, 3, 5);
//
//	//探究书写形式*********************************
//	int arr1[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = arr1;
//	int i = 0;
//	for (i = 0; i < 10; i++) {
//		//printf("%d ", p[i]);
//		//printf("%d ", *(p+i));
//		//printf("%d ", arr1[i]);
//		printf("%d ", *(arr1+i));//arr1[i]=*(arr1+i)=p[i]=*(p+i)
//	}
//	//*********************************************
//
//	return 0;
//}

